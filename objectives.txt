# Catch a Pokemon! :taco: :happy: :panda:

Omg! It's make a game time!

This task is to create your onw pokemon game.

Please follow the core structure so you don't get lost, and after you are free to enhance the game as you see fit.

## Simple outcome
The excercise is to use the `requests` package and `sql` knowledge and `OOP` to build something fun.

## Objective are:
- make a new project
- add git and github `I need at least 20 commits with good git etiquette`
    - have a gitignore
- create a simple README.md file

technical specs:
- make two classes `Player` and `Pokemon`
- Run the game in other

### `Player`
Class `Player` should:
- have name
- have city
- have pokemon_cathed_list

behavior/method/actions should:
- search for pokemon
    - it should generate a random Pokemon instance
    - promp user if he wants to try and capture the pokement
    - call private (encapsulated method) of try_to_catch_pokemon
- Encapsulated method: try_to_catch_pokemon
    - if successful it should append the pokemon to list
- save player and his pokemon
- Load previous player

### `Pokemon`
Class `pokemon` should:
- have name

help tips
- search for the package `pokemonNames`
    - use it to generate random names for pokemons

`pip install pokemonNames`  -- > pip install pokemonNames


behavior/method/actions should:
- tackle
- make sounds
- rest_to_refill_health
- save a pokemon
- load a pokemon


### `DB & sql`
- Make table SQL-Server-Management tool
- should have two tables
- connect to your app
- shouble be able to save the human
- should be able to save a pokemon
- SELECT & insert



## Learning outcomes :smile:
- Git + github (not branching yet)
- OOP
- DB SQL and connection
    - Setting up a DB
    - Making a connection
    - Loading from DB into objects
    - Saving - Making thing presistant
- Using external packages

and also:
- testing (some TDD possibly?)
- Error handling
- Using __name__ & __main__
- Documentation